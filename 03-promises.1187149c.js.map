{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAKbO,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAEN,MAAMC,EAAaC,SAASC,KAAKC,SAASf,MAAMgB,OAC1CC,EAAOJ,SAASC,KAAKC,SAASE,KAAKD,OACnCE,EAASL,SAASC,KAAKC,SAASG,OAAOF,OAE7C,IAAIG,EAAeP,EAGnB,IAAK,IAAIQ,EAAI,EAAGA,GAAKF,EAAQE,IAC3BtB,EAAcsB,EAAGD,GACdE,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBzB,QAAiBC,MAAU,IAGnDyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBsB,EAAA1B,GAAS2B,OAAOG,QACd,sBAAoB3B,QAAeC,MAAU,IAInDmB,GAAgBF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Declaration of the function that creates a promise an contains the logic for resolve or reject\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//Handling the submit of the form\ndocument.querySelector('.form').addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const firstDelay = parseInt(this.elements.delay.value);\n  const step = parseInt(this.elements.step.value);\n  const amount = parseInt(this.elements.amount.value);\n\n  let currentDelay = firstDelay;\n\n  // For the amount entered in the browser amessage will be displayed depending on the state of createPromise function\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // the delay is incremented with step value for each interation\n    currentDelay += step;\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","firstDelay","parseInt","this","elements","value","step","amount","currentDelay","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.1187149c.js.map"}